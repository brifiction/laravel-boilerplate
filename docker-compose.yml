version: '3.7'
services:

  #PHP Service
  app:
    image: digitalocean.com/php
    container_name: app
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - .docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - redis

  #Nginx Service
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "9000:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - .docker/nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  #MySQL Service
  mysql:
    image: mysql:8.0.19
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: root
      SERVICE_NAME: mysql
      SERVICE_TAGS: dev
    volumes:
      - dbdata:/var/lib/mysql-files
      - .docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

    #MSSQl Service
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql
    build:
      context: .docker/mssql
      dockerfile: Dockerfile
    environment:
      SA_PASSWORD: "I9j@&17d8QzP4N1RLu1k!"
      ACCEPT_EULA: "Y"
      MSSQL_AGENT_ENABLED: "true"
      SERVICE_NAME: mssql
      SERVICE_TAGS: dev
    ports:
      - "1433:1433"
    networks:
      - app-network

  # PhpMyAdmin
  phpmyadmin:
    depends_on:
      - mysql
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root
      SERVICE_NAME: phpmyadmin
      SERVICE_TAGS: dev
    networks:
      - app-network

  #Redis Service
  redis:
    image: redis:4.0
    container_name: redis
    restart: unless-stopped
    build:
      context: .docker/redis
      dockerfile: Dockerfile
    ports:
      - "6382:6379"
    environment:
      - DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
